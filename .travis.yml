dist: xenial
language: python
cache: pip
# build matrix: different python and pandoc versions
python:
  - "3.4"
  - "3.5"
  - "3.6"
  - "3.7"
  - "3.8-dev"
  - "nightly"
  # pypy (version info from [Changelogs â€” PyPy documentation](http://doc.pypy.org/en/latest/index-of-whatsnew.html))
  - "pypy3.5"
env:
  # last 1.x verison
  - pandocVersion=1.19.2.1
  # latest version as of writing
  - pandocVersion=2.7.2
  - pandocVersion=latest
matrix:
  allow_failures:
    - python: "3.8-dev"
#     - env: pandocVersion=1.19.2.1
  fast_finish: true
# install dependencies
install:
  - pip install -U pip
  # latest pip dropped support for py3.2, which is the version of python in pypy3
  # - if [[ "$TRAVIS_PYTHON_VERSION" != "pypy3" ]]; then pip install -U pip; fi
  # setup.py requires a minimum version of setuptools.  The virtual environments
  # of some of the python versions does not have a sufficiently new setuptools
  # version.
  - |
    SETUPTOOLS_VERSION=$(easy_install --version | cut -d' ' -f2) &&
    dpkg --compare-versions ${SETUPTOOLS_VERSION} lt 20.6.8 && pip install -U setuptools ||
    echo "Setuptools ${SETUPTOOLS_VERSION} is suficiently new (>=20.6.8)"
  - pip install -e .[test]
  # pandoc
  - |
    downloadUrl=$(python -c 'import requests, sys
v = sys.argv[1]
url = "https://api.github.com/repos/jgm/pandoc/releases/" + ("" if v == "latest" else "tags/") + v
print(next(i["browser_download_url"] for i in requests.get(url).json()["assets"] if i["name"][-3:] == "deb"))
' $pandocVersion) &&
    wget $downloadUrl &&
    sudo dpkg -i ${downloadUrl##*/}
# command to run tests
script:
  - make -j3 test
after_success:
  - |
    [[ "$pandocVersion" == "latest" && "$TRAVIS_PYTHON_VERSION" == "3.7" ]] && coveralls
deploy:
  provider: pypi
  user: ickc
  password: $pypi_password
  distributions: "sdist bdist_wheel"
  skip_cleanup: true
  on:
    tags: true
    python: "3.7"
    condition: $pandocVersion = latest
